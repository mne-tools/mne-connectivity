version: 2.1

_xvfb: &xvfb
  name: Start Xvfb virtual framebuffer
  command: |
    echo "export DISPLAY=:99" >> $BASH_ENV
    /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1280x1024x24 -ac +extension GLX +render -noreset -nolisten tcp -nolisten unix


jobs:
    build_docs:
      docker:
        - image: circleci/python:3.8.5-buster
      steps:
        - restore_cache:
            keys:
              - source-cache-connectivity

        - checkout

        - run:
            name: Complete checkout
            command: |
              if ! git remote -v | grep upstream; then
                git remote add upstream git://github.com/mne-tools/mne-connectivity.git
              fi
              git fetch upstream

        - save_cache:
            key: source-cache-connectivity
            paths:
              - ".git"

        - add_ssh_keys:
            fingerprints:
              - "d6:88:6b:a0:80:bf:14:8e:80:2e:ed:11:52:26:37:68"

        - run:
            name: Set BASH_ENV
            command: |
              set -e
              echo "set -e" >> $BASH_ENV
              echo "export OPENBLAS_NUM_THREADS=4" >> $BASH_ENV
              echo "export XDG_RUNTIME_DIR=/tmp/runtime-circleci" >> $BASH_ENV
              echo "export MNE_FULL_DATE=true" >> $BASH_ENV
              source tools/get_minimal_commands.sh
              echo "export MNE_3D_BACKEND=pyvista" >> $BASH_ENV
              echo "export PATH=~/.local/bin/:$PATH" >> $BASH_ENV
              echo "BASH_ENV:"
              cat $BASH_ENV
              mkdir -p ~/mne_data
              touch pattern.txt;

        - run:
            name: Merge with upstream
            command: |
              echo $(git log -1 --pretty=%B) | tee gitlog.txt
              echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
              if [[ $(cat merge.txt) != "" ]]; then
                echo "Merging $(cat merge.txt)";
                git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
              fi

        - run:
            <<: *xvfb

        # Load pip cache
        - restore_cache:
            keys:
              - pip-cache
        - restore_cache:
            keys:
              - user-install-bin-cachev1
              
        - run:
            name: Get Python running and install dependencies
            command: |
              ./tools/circleci_dependencies.sh

        - save_cache:
            key: pip-cache
            paths:
              - ~/.cache/pip

        - save_cache:
            key: user-install-bin-cachev1
            paths:
              - ~/.local/lib/python3.8/site-packages
              - ~/.local/bin

        # Look at what we have and fail early if there is some library conflict
        - run:
            name: Check installation
            command: |
               which python
               python -c "import mne; mne.sys_info()"
               LIBGL_DEBUG=verbose python -c "import matplotlib.pyplot as plt; plt.figure()"
               python -c "import mne; mne.set_config('MNE_LOGGING_LEVEL', 'info')"
               python -c "import mne; level = mne.get_config('MNE_LOGGING_LEVEL'); assert level.lower() == 'info', repr(level)"

        # Load our data
        - restore_cache:
            keys:
              - data-cache-sample

        # Load our data
        - restore_cache:
            keys:
              - data-cache-bst-resting

        - run:
            name: Check PyQt5
            command: LD_DEBUG=libs python -c "from PyQt5.QtWidgets import QApplication, QWidget; app = QApplication([])"

        # Look at what we have and fail early if there is some library conflict
        - run:
            name: Check installation
            command: |
               which python
               QT_DEBUG_PLUGINS=1 mne sys_info
               python -c "import numpy; numpy.show_config()"
               LIBGL_DEBUG=verbose python -c "import pyvistaqt; pyvistaqt.BackgroundPlotter(show=True)"
               python -c "import mne; mne.set_config('MNE_USE_CUDA', 'false')"  # this is needed for the config tutorial
               python -c "import mne; mne.set_config('MNE_LOGGING_LEVEL', 'info')"
               python -c "import mne; level = mne.get_config('MNE_LOGGING_LEVEL'); assert level.lower() == 'info', repr(level)"

        - run:
            name: Get data
            command: |
              python setup.py develop --user
              mkdir -p ~/mne_data
              python -c "import mne; print(mne.datasets.sample.data_path(update_path=True))";
              python -c "import mne; print(mne.datasets.brainstorm.bst_resting.data_path(update_path=True))";

        # Build docs
        - run:
            name: make html
            command: |
              cd doc;
              make html;

        # Save the JUnit file
        - store_test_results:
            path: doc/_build/test-results
        - store_artifacts:
            path: doc/_build/test-results
            destination: test-results

        # Save the outputs
        - store_artifacts:
            path: doc/_build/html/
            destination: dev
        - persist_to_workspace:
            root: doc/_build
            paths:
              - html

        # Keep these separate, maybe better in terms of size limitations (?)
        - save_cache:
            key: data-cache-sample
            paths:
              - ~/.mne
              - ~/mne_data/MNE-sample-data

        - save_cache:
            key: data-cache-bst-resting
            paths:
              - ~/.mne
              - ~/mne_data/MNE-brainstorm-data/bst_resting

    docs-deploy:
        docker:
          - image: node:8
        steps:
          - checkout

          - attach_workspace:
              at: doc/_build

          - restore_cache:
              keys:
                - website-cache

          - run:
              name: Install and configure dependencies
              command: |
                npm install --global gh-pages@3.0
                git config --global user.email "circle@mne.com"
                git config --global user.name "Circle Ci"

          - add_ssh_keys:
              fingerprints:
                - "d6:88:6b:a0:80:bf:14:8e:80:2e:ed:11:52:26:37:68"

          - run:
              # push built docs into the `dev` directory on the `gh-pages` branch
              name: Deploy docs to gh-pages branch
              command: |
                if [ "${CIRCLE_BRANCH}" == "main" ]; then
                  echo "Deploying dev docs for ${CIRCLE_BRANCH}.";
                  gh-pages --dotfiles --message "doc updates [skip ci] (${CIRCLE_BUILD_NUM})" --dist doc/_build/html --dest ./dev
                else
                  echo "Deploying stable docs for ${CIRCLE_BRANCH}.";
                  gh-pages --dotfiles --message "doc updates [skip ci] (${CIRCLE_BUILD_NUM})" --dist doc/_build/html --dest ./stable
                fi;

          - save_cache:
              key: website-cache
              paths:
                - ~/mne-connectivity

workflows:
  version: 2

  default:
    jobs:
      - build_docs
      - docs-deploy:
          requires:
            - build_docs
          filters:
            branches:
              only:
                - main
                - maint/0.2
